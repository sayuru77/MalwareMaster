import tkinter as tk
from tkinter import filedialog
import pefile

def browse_file():
    file_path = filedialog.askopenfilename()
    if file_path:
        analyze_file(file_path)

def analyze_file(file_path):
    # Open the file
    pe = pefile.PE(file_path)

    # Display information about the PE file
    output_text.config(state=tk.NORMAL)
    output_text.delete(1.0, tk.END)
    output_text.insert(tk.END, "PE File Information:\n")
    output_text.insert(tk.END, f"File Path: {file_path}\n")
    output_text.insert(tk.END, f"File Size: {pe.OPTIONAL_HEADER.SizeOfImage} bytes\n")
    output_text.insert(tk.END, f"Entry Point: 0x{pe.OPTIONAL_HEADER.AddressOfEntryPoint:08X}\n")

    # Get the selected function from the menu
    selected_function = function_menu_var.get()
    
    if selected_function == "Section Information":
        # Display section information
        output_text.insert(tk.END, "\nSection Information:\n")
        for section in pe.sections:
            output_text.insert(tk.END, f"Name: {section.Name.decode('utf-8').rstrip('{{}}')}\n")
            output_text.insert(tk.END, f"Size: {section.SizeOfRawData} bytes\n")
            output_text.insert(tk.END, f"Characteristics: 0x{section.Characteristics:08X}\n\n")
    elif selected_function == "PE Header Information":
        # Display PE header information
        output_text.insert(tk.END, "PE Header Information:\n")
        output_text.insert(tk.END, f"Machine Type: 0x{pe.FILE_HEADER.Machine:04X}\n")
        output_text.insert(tk.END, f"Time Date Stamp: {pe.FILE_HEADER.TimeDateStamp}\n")
        output_text.insert(tk.END, f"Number of Sections: {pe.FILE_HEADER.NumberOfSections}\n")
        output_text.insert(tk.END, f"Characteristics: 0x{pe.FILE_HEADER.Characteristics:04X}\n")
    elif selected_function == "File Header Information":
        # Display file header information
        output_text.insert(tk.END, "File Header Information:\n")
        output_text.insert(tk.END, f"Machine Type: 0x{pe.FILE_HEADER.Machine:04X}\n")
        output_text.insert(tk.END, f"Time Date Stamp: {pe.FILE_HEADER.TimeDateStamp}\n")
        output_text.insert(tk.END, f"Number of Sections: {pe.FILE_HEADER.NumberOfSections}\n")
        output_text.insert(tk.END, f"Characteristics: 0x{pe.FILE_HEADER.Characteristics:04X}\n")
    elif selected_function == "Resource Information":
        # Display resource information
        output_text.insert(tk.END, "Resource Information:\n")
        for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
            output_text.insert(tk.END, f"Resource Type: {resource_type.name}\n")
            for resource_id in resource_type.directory.entries:
                output_text.insert(tk.END, f"Resource ID: {resource_id.name}\n")
    elif selected_function == "Exported Functions and Symbols":
        # Display exported functions and symbols
        output_text.insert(tk.END, "Exported Functions and Symbols:\n")
        if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
            for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
                output_text.insert(tk.END, f"Exported Symbol: {exp.name.decode('utf-8')}\n")
    elif selected_function == "String Extraction and Analysis":
        # Extract and analyze strings in the binary
        output_text.insert(tk.END, "String Extraction and Analysis:\n")
        string_list = []
        for section in pe.sections:
            strings = section.get_data().decode(errors='ignore').split('\x00')
            string_list.extend(strings)
        for i, s in enumerate(string_list):
            output_text.insert(tk.END, f"String {i+1}: {s}\n")

    output_text.config(state=tk.DISABLED)

# Create the main application window
app = tk.Tk()
app.title("MalwareMaster - The Ultimate Malware Analysis Tool")

# Create a function selection menu
function_menu_var = tk.StringVar(app)
function_menu_var.set("Select Function")
function_menu = tk.OptionMenu(app, function_menu_var, "Select Function", "Section Information", "PE Header Information", "File Header Information", "Resource Information", "Exported Functions and Symbols", "String Extraction and Analysis")
function_menu.pack()

# Create a browse button
browse_button = tk.Button(app, text="Browse File", command=browse_file)
browse_button.pack()

# Create a text box for displaying analysis results
output_text = tk.Text(app, height=15, width=50)
output_text.pack()
output_text.config(state=tk.DISABLED)

# Start the GUI main loop
app.mainloop()
